<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <title>Cart</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="color-scheme" content="dark" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bulma@0.9.3/css/bulma.min.css">
    <link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
</head>
<body>
    <h2 class="section make-it-left make-it-white-back make-it-dark make-it-rounded-top make-it-normal">
        Your Cart
    </h2>

    <section class="section">
        {{#if cart.products.length}}
            <div class="box cart-products">
                <table class="table is-fullwidth is-striped make-it-small">
                    <thead>
                        <tr>
                            <th></th>
                            <th>Title / PID</th>
                            <th>Code</th>
                            <th>Description</th>
                            <th>Pieces</th>
                            <th>Price</th>
                            <th>Qty</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        {{#each cart.products}}
                        <tr data-pid="{{this.pid}}">
                            <td width="64px"><img src="{{this.imageURL}}" alt="{{this.title}}" /></td>
                            <td>{{this.title}}<br /><span class="make-it-small">({{this.pid}})</span></td>
                            <td>{{this.code}}</td>
                            <td>{{this.description}}</td>
                            <td class="make-it-center">{{this.pieces}}</td>
                            <td class="make-it-center">${{this.price}}</td>
                            <td class="make-it-center">x{{this.quantity}}</td>
                            <td class="make-it-center">
                                <button class="button section make-it-small is-danger" onclick="removeItem('{{../cart.cid}}', '{{this.pid}}')">
                                    Remove
                                </button>
                            </td>
                        </tr>
                        {{/each}}
                    </tbody>
                </table>

                <div class="make-it-rounded-top small-section make-it-small make-it-semi make-it-right">
                    Cart ID: {{cart.cid}}
                </div>

                <div class="rt-general-page-footer make-it-semi-back is-centered grid-container-3c-by-1r-special">
                    <div></div>
                    <button class="button section make-it-small" onclick="emptyCart('{{cart.cid}}')">Empty Cart</button>
                    <button id="purchaseButton" class="button section make-it-small is-success" onclick="purchaseCart('{{cart.cid}}')">Complete Purchase</button>
                </div>
            </div>
        {{else}}
            <p class="make-it-white make-it-center">Your cart is empty.</p>
            <p class="make-it-white make-it-center">
                Go to <a class="button is-small" href="/products"><b>/products</b></a> to start adding.
            </p>
        {{/if}}
    </section>

    <script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="/js/showToast.js"></script>

    <script>
        const token = localStorage.getItem("token");

        async function removeItem(cid, pid) {
            if (!confirm("Are you sure you want to remove this item?")) return;
            try {
                const res = await fetch(`/api/carts/${cid}/products/${pid}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`
                    }
                });
                if (res.ok) {
                    const result = await res.json();
                    if (result.token) localStorage.setItem("token", result.token);
                    location.reload();
                } else {
                    showToast("Failed to remove item from cart.", false);
                }
            } catch (err) {
                console.error("Remove error:", err);
                showToast("Something went wrong.", false);
            }
        }

        async function emptyCart(cid) {
            if (!confirm("Are you sure you want to empty the cart?")) return;
            try {
                const res = await fetch(`/api/carts/${cid}`, {
                    method: "DELETE",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`
                    }
                });
                if (res.ok) {
                    const result = await res.json();
                    if (result.token) localStorage.setItem("token", result.token);
                    location.reload();
                } else {
                    showToast("Failed to empty cart.", false);
                }
            } catch (err) {
                console.error("Empty error:", err);
                showToast("Something went wrong.", false);
            }
        }

        async function purchaseCart(cid) {
            const purchaseButton = document.getElementById("purchaseButton");
            if (!confirm("Proceed to purchase?")) return;

            purchaseButton.disabled = true;

            try {
                const res = await fetch(`/api/carts/${cid}/purchase`, {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json",
                        Authorization: `Bearer ${token}`
                    }
                });

                const result = await res.json();

                if (res.ok) {
                    if (result.token) {
                        localStorage.setItem("token", result.token);
                    }

                    const boughtCount = result.ticket.purchased?.length || 0;
                    const failedCount = result.ticket.notPurchased?.length || 0;

                    const msg = `Purchase completed. ${boughtCount} product(s) bought.${failedCount > 0 ? ` ${failedCount} item(s) didnâ€™t have enough stock and remain in your cart.` : ""}`;
                    showToast(msg, true);

                    setTimeout(() => {
                        location.reload();
                    }, 3000);
                } else {
                    showToast(result.message || "Failed to complete purchase.", false);
                    purchaseButton.disabled = false;
                }
            } catch (err) {
                console.error("Purchase error:", err);
                showToast("Something went wrong during purchase.", false);
                purchaseButton.disabled = false;
            }
        }
    </script>
</body>
</html>
